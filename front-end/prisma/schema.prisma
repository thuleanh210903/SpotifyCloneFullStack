// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  email String? @unique
  name String? 
  hashedPassword String?
  emailVerified DateTime?
  birthday DateTime?

}

model Artists {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  image String?
  description String?
  songs Songs[]
  albums Albums[]
}

model Albums {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  artistId String @db.ObjectId
  name String?
  releaseDate DateTime?
  description String?
  price Float?
  artist Artists @relation(fields: [artistId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  albumToSongs AlbumToSongs[]

} 

model Songs {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  artistId String @db.ObjectId
  name String?
  releaseDate DateTime?
  description String?
  lyric String?
  image String?
  duration DateTime?
  albumToSongs AlbumToSongs[]
  artist Artists @relation(fields: [artistId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}


model AlbumToSongs {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  albumId String @db.ObjectId
  songId String @db.ObjectId
  albums Albums @relation(fields: [albumId], references: [id], onDelete:Cascade, onUpdate:Cascade)
  songs Songs @relation(fields: [albumId], references: [id], onDelete:Cascade, onUpdate:Cascade)
}